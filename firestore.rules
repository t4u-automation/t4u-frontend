rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user belongs to a specific tenant
    function belongsToTenant(tenantId) {
      // Simplified - just check if authenticated for now
      return isAuthenticated();
    }
    
    // Helper function to check if user is tenant owner
    function isTenantOwner(tenantId) {
      // Simplified - allow all authenticated users for now
      return isAuthenticated();
    }
    
    // ==========================================
    // Tenants
    // ==========================================
    match /tenants/{tenantId} {
      // Users can read their own tenant
      allow read: if isAuthenticated() && 
        (resource.data.owner_id == request.auth.uid || belongsToTenant(tenantId));
      
      // Any authenticated user can create a tenant (for onboarding)
      allow create: if isAuthenticated() && 
        request.resource.data.owner_id == request.auth.uid;
      
      // Only tenant owner can update or delete
      allow update, delete: if isTenantOwner(tenantId);
    }
    
    // ==========================================
    // Users
    // ==========================================
    match /users/{userId} {
      // Users can read their own document
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can read other users in their tenant
      allow read: if isAuthenticated() && belongsToTenant(resource.data.tenant_id);
      
      // Any authenticated user can create their profile
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can update their own document
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      // Only tenant owners can delete users
      allow delete: if isAuthenticated() && isTenantOwner(resource.data.tenant_id);
    }
    
    // ==========================================
    // Projects
    // ==========================================
    match /projects/{projectId} {
      allow read: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
      
      allow create: if isAuthenticated() && 
        (belongsToTenant(request.resource.data.tenant_id) || isTenantOwner(request.resource.data.tenant_id));
      
      allow update, delete: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
    }
    
    // ==========================================
    // Features
    // ==========================================
    match /features/{featureId} {
      allow read: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
      
      allow create: if isAuthenticated() && 
        (belongsToTenant(request.resource.data.tenant_id) || isTenantOwner(request.resource.data.tenant_id));
      
      allow update, delete: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
    }
    
    // ==========================================
    // Stories
    // ==========================================
    match /stories/{storyId} {
      allow read: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
      
      allow create: if isAuthenticated() && 
        (belongsToTenant(request.resource.data.tenant_id) || isTenantOwner(request.resource.data.tenant_id));
      
      allow update, delete: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
    }
    
    // ==========================================
    // Test Cases
    // ==========================================
    match /test_cases/{testCaseId} {
      allow read: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
      
      allow create: if isAuthenticated() && 
        (belongsToTenant(request.resource.data.tenant_id) || isTenantOwner(request.resource.data.tenant_id));
      
      allow update, delete: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
    }
    
    // ==========================================
    // Test Case Statuses
    // ==========================================
    match /test_case_statuses/{statusId} {
      // All tenant members can read statuses
      allow read: if isAuthenticated() && 
        belongsToTenant(resource.data.tenant_id);
      
      // Any authenticated user can create default statuses (during tenant creation)
      allow create: if isAuthenticated();
      
      // Only tenant owners can update or delete statuses
      allow update, delete: if isAuthenticated() && 
        isTenantOwner(resource.data.tenant_id);
    }
    
    // ==========================================
    // Test Plans
    // ==========================================
    match /test_plans/{testPlanId} {
      allow read: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
      
      allow create: if isAuthenticated() && 
        (belongsToTenant(request.resource.data.tenant_id) || isTenantOwner(request.resource.data.tenant_id));
      
      allow update, delete: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
    }
    
    // ==========================================
    // Runs
    // ==========================================
    match /runs/{runId} {
      allow read: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
      
      allow create: if isAuthenticated() && 
        (belongsToTenant(request.resource.data.tenant_id) || isTenantOwner(request.resource.data.tenant_id));
      
      allow update, delete: if isAuthenticated() && 
        (belongsToTenant(resource.data.tenant_id) || isTenantOwner(resource.data.tenant_id));
    }
    
    // ==========================================
    // User Preferences
    // ==========================================
    match /user_preferences/{userId} {
      // Users can read and write their own preferences
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ==========================================
    // Agent Sessions (existing functionality)
    // ==========================================
    match /agent_sessions/{sessionId} {
      // Users can read their own sessions or sessions in their tenant
      allow read: if isAuthenticated() && 
        (resource.data.user_id == request.auth.uid || 
         (resource.data.tenant_id != null && belongsToTenant(resource.data.tenant_id)));
      
      // Users can create sessions for their tenant
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid &&
        (request.resource.data.tenant_id == null || belongsToTenant(request.resource.data.tenant_id));
      
      // Users can update their own sessions
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      
      // Users can delete their own sessions
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
    }
    
    match /agent_steps/{stepId} {
      // Users can read steps if authenticated
      // For queries with tenant_id, validate tenant membership
      // For queries without tenant_id (backward compatibility), just check auth
      allow read: if isAuthenticated() && 
        (resource.data.tenant_id == null || belongsToTenant(resource.data.tenant_id));
      
      // Backend can write steps
      allow write: if isAuthenticated();
    }
  }
}

